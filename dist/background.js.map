{"version":3,"file":"background.js","mappings":"MAAA,IAAIA,EA+DJ,SAASC,EAAmBC,GAC1BC,OAAOC,QAAQC,KAAKC,IAAI,UAAWC,IACjC,GAAe,OAAXA,GAAqC,OAAlBA,EAAOC,QAAyD,IAAtCC,OAAOC,KAAKH,EAAOC,QAAQG,OAC1ET,EAAS,OAAQ,wBACZ,CACL,IAAK,MAAMM,KAAUC,OAAOG,QAAQL,EAAOC,QACzC,GAAyB,WAArBA,EAAO,GAAGK,QAGZ,YAFAX,EAASM,EAAO,GAAGM,KAAMN,EAAO,GAAGO,KAOvCb,EAAS,OAAQ,wBA2BvB,SAASc,IACPb,OAAOc,cAAcC,QAAQ,CAC3BC,KAAO,CACL,GAAM,kCACN,GAAM,kCACN,GAAM,kCACN,GAAM,qCAKZ,SAASC,IACPjB,OAAOc,cAAcC,QAAQ,CAC3BC,KAAO,CACL,GAAM,qCACN,GAAM,qCACN,GAAM,qCACN,GAAM,wCAtHZhB,OAAOc,cAAcI,UAAUC,aAAaC,IAC1CpB,OAAOqB,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACxD,IAAII,EAAQJ,EAAK,GAAGK,GACpB7B,EAAc,gBAAkB4B,EAAME,WAEtC3B,OAAOC,QAAQ2B,MAAMzB,IAAIN,EAAY8B,YAAavB,KAEpB,IAAxBA,EAAOP,IACTG,OAAOqB,KAAKQ,YAAYJ,EAAO,CAAEK,UAAU,IAE3C1B,EAAOP,IAAe,EACtBG,OAAOC,QAAQ2B,MAAMG,IAAK3B,GAAQ,KAChCa,QAGFnB,GAAmB,SAASa,EAAMC,GAChCZ,OAAOqB,KAAKQ,YAAYJ,EAAO,CAAEK,UAAU,EAAMnB,KAAMA,EAAMC,IAAKA,IAElER,EAAOP,IAAe,EACtBG,OAAOC,QAAQ2B,MAAMG,IAAI3B,GAAQ,KAC/BS,mBASZb,OAAOqB,KAAKW,YAAYb,aAAaC,IACnC,IAAIK,EAAQL,EAAIK,MAChB5B,EAAc,gBAAkB4B,EAAME,WAEtC3B,OAAOqB,KAAKlB,IAAIsB,GAAQL,IAGjBA,EAAIR,IAAIqB,WAFI,8BA6CrB,SAAiBR,EAAO5B,GACtBG,OAAOC,QAAQ2B,MAAMzB,IAAIN,GAAcO,KACT,IAAxBA,EAAOP,GACTC,GAAmB,SAASa,EAAMC,GAChCZ,OAAOqB,KAAKQ,YAAYJ,EAAO,CAACK,UAAU,EAAMnB,KAAMA,EAAMC,IAAKA,IAEjER,EAAOP,IAAe,EACtBG,OAAOC,QAAQ2B,MAAMG,IAAK3B,GAAQ,KAChCS,WAKJT,EAAOP,IAAe,EACtBG,OAAOqB,KAAKQ,YAAaJ,EAAO,CAACK,UAAU,IAC3C9B,OAAOC,QAAQ2B,MAAMG,IAAK3B,GAAQ,KAChCa,WAxDFiB,CAAQT,EAAO5B,GAqFnBG,OAAOc,cAAcC,QAAQ,CAC3BC,KAAO,CACL,GAAM,yCACN,GAAM,yCACN,GAAM,yCACN,GAAM,kDApFZhB,OAAOqB,KAAKc,UAAUhB,aAAY,CAACM,EAAOW,EAAMhB,KAG9C,GAFAvB,EAAc,gBAAkB4B,EAAME,WAEnB,WAAfS,EAAKC,aAAoCC,IAAbF,EAAKxB,IAAmB,CACtDZ,OAAOqB,KAAKQ,YAAYJ,EAAO,CAAEK,UAAU,IAC3C,IAAI7B,EAAU,GACdA,EAAQJ,IAAe,EAEvBG,OAAOC,QAAQ2B,MAAMG,IAAI9B,GAAS,KAChCgB,Y","sources":["webpack://golocal/./src/background/index.js"],"sourcesContent":["var current_tab;\n\n// Handles when GoLocal icon is left clicked\nchrome.browserAction.onClicked.addListener((tab) => {\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    let tabId = tabs[0].id;\n    current_tab = 'go_local_tab_' + tabId.toString();\n\n    chrome.storage.local.get(current_tab.toString(), (result) => {\n\n      if (result[current_tab] === true) {\n        chrome.tabs.sendMessage(tabId, { go_local: false });\n\n        result[current_tab] = false\n        chrome.storage.local.set( result, () => {\n          removeBadge();\n        });\n      } else {\n        get_checked_config(function(port, url) {\n          chrome.tabs.sendMessage(tabId, { go_local: true, port: port, url: url });\n\n          result[current_tab] = true;\n          chrome.storage.local.set(result, () => {\n            setBadge();\n          });\n        });\n      };\n    });\n  });\n});\n\n// Handles when the active tab changes\nchrome.tabs.onActivated.addListener((tab) => {\n  let tabId = tab.tabId;\n  current_tab = 'go_local_tab_' + tabId.toString();\n\n  chrome.tabs.get(tabId, (tab) => {\n    let allowedUrl = \"https://apps.nextworld.net\";\n\n    if (!tab.url.startsWith(allowedUrl)) {\n      invalidBadge();\n    } else {\n      setMode(tabId, current_tab);\n    };\n  });\n});\n\n// Handles when the URL changes\nchrome.tabs.onUpdated.addListener((tabId, info, tab) => {\n  current_tab = 'go_local_tab_' + tabId.toString();\n\n  if (info.status == \"loading\" && info.url === undefined) {\n    chrome.tabs.sendMessage(tabId, { go_local: false });\n    let storage = {};\n    storage[current_tab] = false;\n\n    chrome.storage.local.set(storage, () => {\n      removeBadge();\n    });\n  };\n});\n\n// Functions\nfunction get_checked_config(callback) {\n  chrome.storage.sync.get('config', (result) => {\n    if (result === null || result.config === null || Object.keys(result.config).length === 0) {\n      callback('8084', 'http://localhost');\n    } else {\n      for (const config of Object.entries(result.config)) {\n        if (config[1].checked == \"checked\") {\n          callback(config[1].port, config[1].url);\n\n          return;\n        };\n      };\n\n      // Nothing is checked. So use default\n      callback('8084', 'http://localhost');\n    };\n  });\n};\n\nfunction setMode(tabId, current_tab) {\n  chrome.storage.local.get(current_tab, (result) => {\n    if (result[current_tab] === true) {\n      get_checked_config(function(port, url) {\n        chrome.tabs.sendMessage(tabId, {go_local: true, port: port, url: url});\n\n        result[current_tab] = true;\n        chrome.storage.local.set( result, () => {\n          setBadge();\n        });\n      })\n    } else {\n\n      result[current_tab] = false;\n      chrome.tabs.sendMessage( tabId, {go_local: false} );\n      chrome.storage.local.set( result, () => {\n        removeBadge();\n      });\n    };\n  });\n};\n\nfunction setBadge() {\n  chrome.browserAction.setIcon({\n    path : {\n      \"16\": \"assets/local/go_local_on_16.png\",\n      \"19\": \"assets/local/go_local_on_19.png\",\n      \"24\": \"assets/local/go_local_on_24.png\",\n      \"48\": \"assets/local/go_local_on_48.png\",\n    }\n  });\n};\n\nfunction removeBadge() {\n  chrome.browserAction.setIcon({\n    path : {\n      \"16\": \"assets/cloud/go_local_cloud_16.png\",\n      \"19\": \"assets/cloud/go_local_cloud_19.png\",\n      \"24\": \"assets/cloud/go_local_cloud_24.png\",\n      \"48\": \"assets/cloud/go_local_cloud_48.png\",\n    }\n  });\n};\n\nfunction invalidBadge() {\n  chrome.browserAction.setIcon({\n    path : {\n      \"16\": \"assets/invalid/go_local_invalid_16.png\",\n      \"19\": \"assets/invalid/go_local_invalid_19.png\",\n      \"24\": \"assets/invalid/go_local_invalid_24.png\",\n      \"48\": \"assets/invalid/go_local_invalid_48.png\",\n    }\n  });\n};"],"names":["current_tab","get_checked_config","callback","chrome","storage","sync","get","result","config","Object","keys","length","entries","checked","port","url","setBadge","browserAction","setIcon","path","removeBadge","onClicked","addListener","tab","tabs","query","active","currentWindow","tabId","id","toString","local","sendMessage","go_local","set","onActivated","startsWith","setMode","onUpdated","info","status","undefined"],"sourceRoot":""}