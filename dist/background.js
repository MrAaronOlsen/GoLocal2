/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*********************************!*\
  !*** ./src/background/index.js ***!
  \*********************************/
var current_tab; // Handles when GoLocal icon is left clicked

chrome.action.onClicked.addListener(function (tab) {
  chrome.tabs.query({
    active: true,
    currentWindow: true
  }, function (tabs) {
    var tabId = tabs[0].id;
    current_tab = 'go_local_tab_' + tabId.toString();
    chrome.storage.local.get(current_tab.toString(), function (result) {
      if (result[current_tab] === true) {
        chrome.tabs.sendMessage(tabId, {
          go_local: false
        });
        result[current_tab] = false;
        chrome.storage.local.set(result, function () {
          removeBadge();
        });
      } else {
        get_checked_config(function (port, url) {
          chrome.tabs.sendMessage(tabId, {
            go_local: true,
            port: port,
            url: url
          });
          result[current_tab] = true;
          chrome.storage.local.set(result, function () {
            setBadge();
          });
        });
      }
    });
  });
}); // Handles when the active tab changes

chrome.tabs.onActivated.addListener(function (tab) {
  var tabId = tab.tabId;
  current_tab = 'go_local_tab_' + tabId.toString();
  chrome.tabs.get(tabId, function (tab) {
    var allowedUrl = 'https://apps.nextworld.net';

    if (!tab.url.startsWith(allowedUrl)) {
      invalidBadge();
    } else {
      setMode(tabId, current_tab);
    }
  });
}); // Handles when the URL changes

chrome.tabs.onUpdated.addListener(function (tabId, info, tab) {
  current_tab = 'go_local_tab_' + tabId.toString();

  if (info.status == 'loading' && info.url === undefined) {
    chrome.tabs.sendMessage(tabId, {
      go_local: false
    });
    var storage = {};
    storage[current_tab] = false;
    chrome.storage.local.set(storage, function () {
      removeBadge();
    });
  }
}); // Functions

function get_checked_config(callback) {
  chrome.storage.sync.get('config', function (result) {
    if (result === null || result.config === null || Object.keys(result.config).length === 0) {
      callback('8084', 'http://localhost');
    } else {
      for (var _i = 0, _Object$entries = Object.entries(result.config); _i < _Object$entries.length; _i++) {
        var config = _Object$entries[_i];

        if (config[1].checked == 'checked') {
          callback(config[1].port, config[1].url);
          return;
        }
      } // Nothing is checked. So use default


      callback('8084', 'http://localhost');
    }
  });
}

function setMode(tabId, current_tab) {
  chrome.storage.local.get(current_tab, function (result) {
    if (result[current_tab] === true) {
      get_checked_config(function (port, url) {
        chrome.tabs.sendMessage(tabId, {
          go_local: true,
          port: port,
          url: url
        });
        result[current_tab] = true;
        chrome.storage.local.set(result, function () {
          setBadge();
        });
      });
    } else {
      result[current_tab] = false;
      chrome.tabs.sendMessage(tabId, {
        go_local: false
      });
      chrome.storage.local.set(result, function () {
        removeBadge();
      });
    }
  });
}

function setBadge() {
  chrome.action.setIcon({
    path: {
      16: 'assets/local/go_local_on_16.png',
      19: 'assets/local/go_local_on_19.png',
      24: 'assets/local/go_local_on_24.png',
      48: 'assets/local/go_local_on_48.png'
    }
  });
}

function removeBadge() {
  chrome.action.setIcon({
    path: {
      16: 'assets/cloud/go_local_cloud_16.png',
      19: 'assets/cloud/go_local_cloud_19.png',
      24: 'assets/cloud/go_local_cloud_24.png',
      48: 'assets/cloud/go_local_cloud_48.png'
    }
  });
}

function invalidBadge() {
  chrome.action.setIcon({
    path: {
      16: 'assets/invalid/go_local_invalid_16.png',
      19: 'assets/invalid/go_local_invalid_19.png',
      24: 'assets/invalid/go_local_invalid_24.png',
      48: 'assets/invalid/go_local_invalid_48.png'
    }
  });
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,